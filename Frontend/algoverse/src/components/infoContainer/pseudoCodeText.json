{
  "Dijkstra": {
    "description": "Finds the shortest paths from a source to all vertices in the given graph",
    "steps": [
      "Initialize Distances and Set Unvisited Nodes:",
      [
        "for(vertex v in Graph):",
        [
          "distance[v] = infinity",
          "distance[source] = 0"
        ],
        "unvisited = set(all vertices)"
      ],
      "While(Processing Each Node):",
      [
        "while(unvisited != null):",
        [
          "current_vertex = vertex in unvisited with min distance",
          "Update Distances for Neighbors:",
          [
            "for each neighbor n of current_vertex:",
            [
              "new_dist = distance[current_vertex] + edge_weight(current_vertex, n)",
              "if(new_dist < distance[n]):",
              [
                "distance[n] = new_dist"
              ]
            ]
          ],
          "unvisited.remove(current_vertex)",
          "Check if Finished:",
          [
            "if(destination in visited or min distance in unvisited is infinity):",
            [
              "break"
            ]
          ]
        ]
      ],
      "Return Shortest Path:",
      [
        "return distance[destination]"
      ]
    ]
  },
  "BFS": {
    "description": "Explores the nearest nodes first before moving to the next level neighbors.",
    "steps": [
      "Start by putting any one of the graph's vertices at the back of a queue.",
      "Take the front item of the queue and add it to the visited list.",
      "Create a list of that vertex's adjacent nodes. Add the ones which aren't in the visited list to the back of the queue.",
      "Loop:",
      [
        "if queue is empty:",
        [
          "Break out of the loop."
        ],
        "Else:",
        [
          "Repeat the process with the new front item."
        ]
      ],
      "Return visited list as the result of BFS traversal."
    ]
  },
  "DFS": {
    "description": "Explores as far as possible down a branch before backtracking.",
    "steps": [
      "Start by putting any one of the graph's vertices on top of a stack.",
      "Loop:",
      [
        "if the stack is empty:",
        [
          "Return or end the function."
        ],
        "Else:",
        [
          "Pop a vertex from the stack to select the next vertex to visit.",
          "If the vertex is not marked as discovered:",
          [
            "Mark it as discovered.",
            "Add it to the visited list.",
            "Push all adjacent vertices (that are not marked as discovered) to the stack."
          ]
        ]
      ],
      "Return the visited list as the result of DFS traversal."
    ]
  },
  "AStar": {
    "description": "Finds the shortest path in a graph using heuristics to optimize the search.",
    "steps": [
      "Initialize an open list (priority queue) and add the start node to it.",
      "Initialize a closed list (set) to keep track of visited nodes.",
      "Loop:",
      [
        "if the open list is empty:",
        [
          "Path not found. Return failure."
        ],
        "Else:",
        [
          "Remove the node with the lowest f(x) = g(x) + h(x) from the open list, where g(x) is the cost from the start node to the current node, and h(x) is the heuristic estimated cost from the current node to the target.",
          "If the removed node is the target, reconstruct and return the path.",
          "Mark the node as visited by adding it to the closed list.",
          "For each neighbor of the current node:",
          [
            "If the neighbor is in the closed list, skip it.",
            "Calculate g(x) for the neighbor.",
            "If the neighbor is not in the open list or the new g(x) is lower:",
            [
              "Update the neighbor's g(x), h(x), and f(x).",
              "Set the current node as the parent of the neighbor.",
              "Add the neighbor to the open list if it's not already present."
            ]
          ]
        ]
      ],
      "Return failure if no path is found."
    ]
  },"MergeSort": {
    "description": "Sorts an array by recursively dividing it into two halves and merging them in sorted order",
    "steps": [
      "Define a function to merge two sorted subarrays:",
      [
        "FUNCTION merge(array, left, mid, right)",
        [
          "Initialize two pointers to track the indices of the subarrays",
          "i = left // pointer for the left subarray",
          "j = mid + 1 // pointer for the right subarray",
          "Initialize an empty array to store the merged elements",
          "merged = []",
          "Loop until one of the subarrays is exhausted",
          "WHILE i <= mid AND j <= right DO",
          [
            "Compare the current elements of the subarrays and append the smaller one to the merged array",
            "IF array[i] <= array[j] THEN",
            [
              "merged.append(array[i])",
              "i = i + 1"
            ],
            "ELSE",
            [
              "merged.append(array[j])",
              "j = j + 1"
            ],
            "ENDIF"
          ],
          "ENDWHILE",
          "Append the remaining elements of the left subarray, if any",
          "WHILE i <= mid DO",
          [
            "merged.append(array[i])",
            "i = i + 1"
          ],
          "ENDWHILE",
          "Append the remaining elements of the right subarray, if any",
          "WHILE j <= right DO",
          [
            "merged.append(array[j])",
            "j = j + 1"
          ],
          "ENDWHILE",
          "Copy the merged array back to the original array",
          "FOR k = left TO right DO",
          [
            "array[k] = merged[k - left]"
          ],
          "ENDFOR"
        ],
        "ENDFUNCTION"
      ],
      "Define a function to sort an array using merge sort:",
      [
        "FUNCTION mergeSort(array, left, right)",
        [
          "Base case: if the array has only one element or is empty, return",
          "IF left >= right THEN",
          [
            "RETURN"
          ],
          "ENDIF",
          "Recursive case: divide the array into two halves and sort them recursively",
          "Find the middle index of the array",
          "mid = (left + right) / 2",
          "Sort the left half",
          "mergeSort(array, left, mid)",
          "Sort the right half",
          "mergeSort(array, mid + 1, right)",
          "Merge the two sorted halves",
          "merge(array, left, mid, right)"
        ],
        "ENDFUNCTION"
      ]
    ]
  },
  "SelectionSort": {
    "description": "Sorts an array by repeatedly finding the smallest element and swapping it with the first unsorted element",
    "steps": [
      "Loop through the array from left to right:",
      [
        "for i from 0 to length of array - 1:",
        [
          "Find the index of the smallest element in the subarray starting from i:",
          [
            "min_index = i",
            "for j from i + 1 to length of array - 1:",
            [
              "if array[j] < array[min_index] then:",
              [
                "min_index = j"
              ]
            ]
          ],
          "Swap the smallest element with the first unsorted element:",
          [
            "temp = array[i]",
            "array[i] = array[min_index]",
            "array[min_index] = temp"
          ]
        ]
      ],
      "Return the sorted array:",
      [
        "return array"
      ]
    ]
  },
  "BubbleSort": {
    "description": "Sorts an array by repeatedly swapping the adjacent elements if they are in the wrong order",
    "steps": [
      "Loop through the array multiple times:",
      [
        "for i from 0 to length of array - 1:",
        [
          "Loop through the unsorted part of the array:",
          [
            "for j from 0 to length of array - 2 - i:",
            [
              "Compare the adjacent elements and swap them if they are in the wrong order:",
              [
                "if array[j] > array[j + 1] then:",
                [
                  "temp = array[j]",
                  "array[j] = array[j + 1]",
                  "array[j + 1] = temp"
                ]
              ]
            ]
          ]
        ]
      ],
      "Return the sorted array:",
      [
        "return array"
      ]
    ]
  },
    "InsertionSort": {
    "description": "Sorts an array by repeatedly inserting the next element into the correct position in the sorted part",
    "steps": [
      "Loop through the array from left to right:",
      [
        "for i from 1 to length of array - 1:",
        [
          "Store the current element as key:",
          [
            "key = array[i]"
          ],
          "Find the correct position for the key in the sorted part:",
          [
            "j = i - 1",
            "while j >= 0 and array[j] > key:",
            [
              "Shift the element at j to the right by one position:",
              [
                "array[j + 1] = array[j]"
              ],
              "Decrement j by one:",
              [
                "j = j - 1"
              ]
            ]
          ],
          "Insert the key at the correct position:",
          [
            "array[j + 1] = key"
          ]
        ]
      ],
      "Return the sorted array:",
      [
        "return array"
      ]
    ]
  },
    "QuickSort": {
    "description": "Sorts an array by recursively choosing a pivot element and partitioning the array around the pivot",
    "steps": [
      "Define a function to partition the array:",
      [
        "FUNCTION partition(array, low, high)",
        [
          "Choose the last element as the pivot:",
          [
            "pivot = array[high]"
          ],
          "Initialize a variable to track the index of the smaller elements:",
          [
            "i = low - 1"
          ],
          "Loop through the array from low to high:",
          [
            "for j from low to high - 1:",
            [
              "If the current element is less than or equal to the pivot:",
              [
                "Increment i by one:",
                [
                  "i = i + 1"
                ],
                "Swap the current element with the element at i:",
                [
                  "temp = array[i]",
                  "array[i] = array[j]",
                  "array[j] = temp"
                ]
              ]
            ]
          ],
          "Swap the pivot with the element at i + 1:",
          [
            "temp = array[i + 1]",
            "array[i + 1] = array[high]",
            "array[high] = temp"
          ],
          "Return the index of the pivot:",
          [
            "return i + 1"
          ]
        ],
        "ENDFUNCTION"
      ],
      "Define a function to sort the array using quick sort:",
      [
        "FUNCTION quickSort(array, low, high)",
        [
          "Base case: if the array has only one element or is empty, return:",
          [
            "if low >= high then:",
            [
              "return"
            ]
          ],
          "Recursive case: partition the array and sort the subarrays:",
          [
            "Find the index of the pivot after partitioning:",
            [
              "pi = partition(array, low, high)"
            ],
            "Sort the left subarray:",
            [
              "quickSort(array, low, pi - 1)"
            ],
            "Sort the right subarray:",
            [
              "quickSort(array, pi + 1, high)"
            ]
          ]
        ],
        "ENDFUNCTION"
      ]
    ]
  },
  "Binary-add": {
    "description": "Insert new node to binary tree.",
    "steps": [
      "Function for Binary insert(root, n)",
      "Input: root , n (insert node)",

      "If n is root_key",  
      [
        "return"
      ],                  
      "Else If n < root_key",   
      [
        "If LEFT(root) is null",    
        [
          "LEFT(root) < n"
        ],    
        "Else",           
        [
          "insert(LEFT(root),n)"
        ]
      ],   
      "Else If n > root_key",
      [
        "If RIGHT(root) is null",
        [
          "RIGHT(root) < n"
        ],
        "Else",  
        [
          "insert(RIGHT(root),n)"  
        ]
      ]
    ]
  },
  "Binary-delete": {
    "description": "Delete a node from binary tree.",
    "steps": [
      "Function for Binary delete_node(root,key)",
      "min_value_node : node that has smallest value in right sub-tree",
      "Input: root, key(target)",
      
   
      "If root is null",
      [
        "Return null"
      ],
      "If key < root_key",
      [
        "delete_node(LEFT(root), key"
      ],
      "Else If key> root_key",[
        "delete_node(RIGHT(root), key)"
      ],
      "Else If ",
      [
        "If LEFT(root) and RIGHT(root) =null",
        [
          "delete(root)"
        ],
        "Else If LEFT(root) or RIGHT(root) =null",
        [
          "temp < LEFT or RIGHT (root)",
          "root < LEFT or RIGHT (root)",
          "delete(temp)"
        ],
        "Else If",
        [
          "search min_value_node(root)",
          "root < min_value_node",
          "delete(min_value_node)"
        ]
      
      ]
      
    ]
  },
  "Binary-search": {
    "description": "Explore the bianry tree.",
    "steps": [
      "Function for Binary search(root,key)",
      "Input: root, key(target)",
      
      "If root is null",
      [
        "Return null"
      ],
      "If key = root_key",
      [
        "Return root"
      ],
      "Else If key < root_key",
      [
        "Return search(LEFT(root), key)"
      ],
      "Else If key> root_key",
      [
        "Return search(RIGHT(root), key)"
      ],
      "Return null"
    ]
  },
  "BinaryTree": {
    "description": "Tree algorithm that has maximum two child, right child has bigger value then parent's, left child has smaller value then parent's.",
    "steps": [
      "Node Structure:",
      "struct Node:",
      [
        "key : Data or value stored in the node",
        "left :Reference to the left child node",
        "right : Reference to the right child node"
      ],
  
      "Binary Tree Initialization:",
      [
        "root = null : Represents an empty tree"
      ],
      

      "Binary Tree Node Creation:",
      [
        "createNode(value):",
        [
          "newNode = new Node",
          "newNode.key = value",
          "newNode.left = null",
          "newNode.right = null",
          "Return newNode"
        ]
      ]
      
    ]
  }

}
  